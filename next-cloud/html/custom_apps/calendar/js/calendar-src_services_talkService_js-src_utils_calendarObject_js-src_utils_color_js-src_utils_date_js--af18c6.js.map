{"version":3,"file":"calendar-src_services_talkService_js-src_utils_calendarObject_js-src_utils_color_js-src_utils_date_js--af18c6.js?v=bb1229f4c8f95a2b0615","mappings":"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","sources":["webpack:///calendar/src/models/attendee.js","webpack:///calendar/src/models/consts.js","webpack:///calendar/src/services/caldavService.js","webpack:///calendar/src/services/talkService.js","webpack:///calendar/src/utils/attendee.js","webpack:///calendar/src/utils/calendarObject.js","webpack:///calendar/src/utils/color.js","webpack:///calendar/src/utils/date.js","webpack:///calendar/src/utils/logger.js","webpack://calendar/./src/views/ContactsMenuAvailability.vue?f4eb","webpack:///calendar/src/views/ContactsMenuAvailability.vue","webpack:///calendar/src/views/ContactsMenuAvailability.vue?vue&type=script&lang=js","webpack://calendar/./src/views/ContactsMenuAvailability.vue?1ba4"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { AttendeeProperty } from '@nextcloud/calendar-js'\n\n/**\n * Creates a complete attendee object based on given props\n *\n * TODO:\n *  - we should eventually support delegatedFrom and delegatedTo\n *\n * @param {object} props The attendee properties already provided\n * @return {object}\n */\nconst getDefaultAttendeeObject = (props = {}) => Object.assign({}, {\n\t// The calendar-js attendee property\n\tattendeeProperty: null,\n\t// The display-name of the attendee\n\tcommonName: null,\n\t// The calendar-user-type of the attendee\n\tcalendarUserType: 'INDIVIDUAL',\n\t// The participation status of the attendee\n\tparticipationStatus: 'NEEDS-ACTION',\n\t// The role of the attendee\n\trole: 'REQ-PARTICIPANT',\n\t// The RSVP for the attendee\n\trsvp: false,\n\t// The uri of the attendee\n\turi: null,\n\t// Member address of the attendee\n\tmember: null,\n}, props)\n\n/**\n * Maps a calendar-js attendee property to our attendee object\n *\n * @param {AttendeeProperty} attendeeProperty The calendar-js attendeeProperty to turn into a attendee object\n * @return {object}\n */\nconst mapAttendeePropertyToAttendeeObject = (attendeeProperty) => {\n\treturn getDefaultAttendeeObject({\n\t\tattendeeProperty,\n\t\tcommonName: attendeeProperty.commonName,\n\t\tcalendarUserType: attendeeProperty.userType,\n\t\tparticipationStatus: attendeeProperty.participationStatus,\n\t\trole: attendeeProperty.role,\n\t\trsvp: attendeeProperty.rsvp,\n\t\turi: attendeeProperty.email,\n\t\tmember: attendeeProperty.member,\n\t})\n}\n\n/**\n * Maps a principal object to to our attendee object\n *\n * @param {object} principalObject An attendee object created by mapDavToPrincipal()\n * @param {boolean} isOrganizer Should it be an attendee or an organizer?\n * @return {AttendeeProperty}\n */\nconst mapPrincipalObjectToAttendeeObject = (principalObject, isOrganizer = false) => {\n\tconst attendeeProperty = AttendeeProperty.fromNameAndEMail(\n\t\tprincipalObject.displayname,\n\t\tprincipalObject.emailAddress,\n\t\tisOrganizer,\n\t)\n\tattendeeProperty.userType = principalObject.calendarUserType\n\treturn mapAttendeePropertyToAttendeeObject(attendeeProperty)\n}\n\nexport {\n\tgetDefaultAttendeeObject,\n\tmapAttendeePropertyToAttendeeObject,\n\tmapPrincipalObjectToAttendeeObject,\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nconst COMPONENT_NAME_EVENT = 'VEVENT'\nconst COMPONENT_NAME_JOURNAL = 'VJOURNAL'\nconst COMPONENT_NAME_VTODO = 'VTODO'\n\nconst ITIP_MESSAGE_ADD = 'ADD'\nconst ITIP_MESSAGE_CANCEL = 'CANCEL'\nconst ITIP_MESSAGE_COUNTER = 'COUNTER'\nconst ITIP_MESSAGE_DECLINECOUNTER = 'DECLINECOUNTER'\nconst ITIP_MESSAGE_PUBLISH = 'PUBLISH'\nconst ITIP_MESSAGE_REFRESH = 'REFRESH'\nconst ITIP_MESSAGE_REPLY = 'REPLY'\nconst ITIP_MESSAGE_REQUEST = 'REQUEST'\n\nconst PRINCIPAL_PREFIX_USER = 'principal:principals/users/'\nconst PRINCIPAL_PREFIX_GROUP = 'principal:principals/groups/'\nconst PRINCIPAL_PREFIX_CIRCLE = 'principal:principals/circles/'\nconst PRINCIPAL_PREFIX_CALENDAR_RESOURCE = 'principal:principals/calendar-resources/'\nconst PRINCIPAL_PREFIX_CALENDAR_ROOM = 'principal:principals/calendar-rooms/'\n\nconst CALDAV_BIRTHDAY_CALENDAR = 'contact_birthdays'\n\nconst IMPORT_STAGE_DEFAULT = 'default'\nconst IMPORT_STAGE_IMPORTING = 'importing'\nconst IMPORT_STAGE_AWAITING_USER_SELECT = 'awaitingUserSelect'\nconst IMPORT_STAGE_PROCESSING = 'processing'\n\nexport {\n\tCOMPONENT_NAME_EVENT,\n\tCOMPONENT_NAME_JOURNAL,\n\tCOMPONENT_NAME_VTODO,\n\tITIP_MESSAGE_ADD,\n\tITIP_MESSAGE_CANCEL,\n\tITIP_MESSAGE_COUNTER,\n\tITIP_MESSAGE_DECLINECOUNTER,\n\tITIP_MESSAGE_PUBLISH,\n\tITIP_MESSAGE_REFRESH,\n\tITIP_MESSAGE_REPLY,\n\tITIP_MESSAGE_REQUEST,\n\tPRINCIPAL_PREFIX_USER,\n\tPRINCIPAL_PREFIX_GROUP,\n\tPRINCIPAL_PREFIX_CIRCLE,\n\tPRINCIPAL_PREFIX_CALENDAR_RESOURCE,\n\tPRINCIPAL_PREFIX_CALENDAR_ROOM,\n\tCALDAV_BIRTHDAY_CALENDAR,\n\tIMPORT_STAGE_DEFAULT,\n\tIMPORT_STAGE_IMPORTING,\n\tIMPORT_STAGE_AWAITING_USER_SELECT,\n\tIMPORT_STAGE_PROCESSING,\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport DavClient from '@nextcloud/cdav-library'\nimport { generateRemoteUrl } from '@nextcloud/router'\nimport { getRequestToken } from '@nextcloud/auth'\nimport { CALDAV_BIRTHDAY_CALENDAR } from '../models/consts.js'\n\nconst clients = {}\n\nconst getClientKey = (headers) => JSON.stringify(headers)\n\nconst getClient = (headers = {}) => {\n\tconst clientKey = getClientKey(headers)\n\tif (clients[clientKey]) {\n\t\treturn clients[clientKey]\n\t}\n\n\tclients[clientKey] = new DavClient({\n\t\trootUrl: generateRemoteUrl('dav'),\n\t}, () => {\n\t\tconst mergedHeaders = {\n\t\t\t'X-Requested-With': 'XMLHttpRequest',\n\t\t\trequesttoken: getRequestToken(),\n\t\t\t'X-NC-CalDAV-Webcal-Caching': 'On',\n\t\t\t...headers,\n\t\t}\n\t\tconst xhr = new XMLHttpRequest()\n\t\tconst oldOpen = xhr.open\n\n\t\t// override open() method to add headers\n\t\txhr.open = function() {\n\t\t\tconst result = oldOpen.apply(this, arguments)\n\t\t\tfor (const name in mergedHeaders) {\n\t\t\t\txhr.setRequestHeader(name, mergedHeaders[name])\n\t\t\t}\n\n\t\t\treturn result\n\t\t}\n\n\t\tOC.registerXHRForErrorProcessing(xhr) // eslint-disable-line no-undef\n\t\treturn xhr\n\t})\n\n\treturn clients[clientKey]\n}\n\n/**\n * Initializes the client for use in the user-view\n */\nconst initializeClientForUserView = async () => {\n\tawait getClient().connect({ enableCalDAV: true })\n}\n\n/**\n * Initializes the client for use in the public/embed-view\n */\nconst initializeClientForPublicView = async () => {\n\tawait getClient()._createPublicCalendarHome()\n}\n\n/**\n * Fetch all calendars from the server\n *\n * @param {object} headers\n * @return {Promise<CalendarHome>}\n */\nconst getCalendarHome = (headers) => getClient(headers).calendarHomes[0]\n\n/**\n * Fetch all collections in the calendar home from the server\n *\n * @return {Promise<Collection[]>}\n */\nconst findAll = () => {\n\treturn getCalendarHome().findAllCalDAVCollectionsGrouped()\n}\n\n/**\n * Fetch all calendars in the calendar home from the server\n *\n * @return {Promise<Calendar[]>}\n */\nconst findAllCalendars = () => {\n\treturn getCalendarHome().findAllCalendars()\n}\n\n/**\n * Fetch all subscriptions in the calendar home from the server\n */\nexport const findAllSubscriptions = async () => {\n\tconst headers = {\n\t\t'X-NC-CalDAV-Webcal-Caching': 'Off',\n\t}\n\n\t// Ensure the client is initialized once\n\tawait getClient(headers).connect({ enableCalDAV: true })\n\n\treturn getCalendarHome(headers).findAllSubscriptions()\n}\n\n/**\n * Fetch all deleted calendars from the server\n *\n * @return {Promise<Calendar[]>}\n */\nconst findAllDeletedCalendars = () => {\n\treturn getCalendarHome().findAllDeletedCalendars()\n}\n\n/**\n * Fetch public calendars by their token\n *\n * @param {string[]} tokens List of tokens\n * @return {Promise<Calendar[]>}\n */\nconst findPublicCalendarsByTokens = async (tokens) => {\n\tconst findPromises = []\n\n\tfor (const token of tokens) {\n\t\tconst promise = getClient().publicCalendarHome\n\t\t\t.find(token)\n\t\t\t.catch(() => null) // Catch outdated tokens\n\n\t\tfindPromises.push(promise)\n\t}\n\n\tconst calendars = await Promise.all(findPromises)\n\treturn calendars.filter((calendar) => calendar !== null)\n}\n\n/**\n * Fetches all scheduling inboxes\n *\n * Nitpick detail: Technically, we shouldn't be querying all scheduling inboxes\n * in the calendar-home and just take the first one, but rather query the\n * \"CALDAV:schedule-inbox-URL\" property on the principal URL and take that one.\n * However, it doesn't make any difference for the Nextcloud CalDAV server\n * and saves us extraneous requests here.\n *\n * https://tools.ietf.org/html/rfc6638#section-2.2.1\n *\n * @return {Promise<ScheduleInbox[]>}\n */\nconst findSchedulingInbox = async () => {\n\tconst inboxes = await getCalendarHome().findAllScheduleInboxes()\n\treturn inboxes[0]\n}\n\n/**\n * Fetches all scheduling outboxes\n *\n * Nitpick detail: Technically, we shouldn't be querying all scheduling outboxes\n * in the calendar-home and just take the first one, but rather query the\n * \"CALDAV:schedule-outbox-URL\" property on the principal URL and take that one.\n * However, it doesn't make any difference for the Nextcloud CalDAV server\n * and saves us extraneous requests here.\n *\n * https://tools.ietf.org/html/rfc6638#section-2.1.1\n *\n * @return {Promise<ScheduleOutbox>}\n */\nconst findSchedulingOutbox = async () => {\n\tconst outboxes = await getCalendarHome().findAllScheduleOutboxes()\n\treturn outboxes[0]\n}\n\n/**\n * Creates a calendar\n *\n * @param {string} displayName Visible name\n * @param {string} color Color\n * @param {string[]} components Supported component set\n * @param {number} order Order of calendar in list\n * @param {string} timezoneIcs ICS representation of timezone\n * @return {Promise<Calendar>}\n */\nconst createCalendar = async (displayName, color, components, order, timezoneIcs) => {\n\treturn getCalendarHome().createCalendarCollection(displayName, color, components, order, timezoneIcs)\n}\n\n/**\n * Creates a subscription\n *\n * This function does not return a subscription, but a cached calendar\n *\n * @param {string} displayName Visible name\n * @param {string} color Color\n * @param {string} source Link to WebCAL Source\n * @param {number} order Order of calendar in list\n * @return {Promise<Calendar>}\n */\nconst createSubscription = async (displayName, color, source, order) => {\n\treturn getCalendarHome().createSubscribedCollection(displayName, color, source, order)\n}\n\n/**\n * Enables the birthday calendar\n *\n * @return {Promise<Calendar>}\n */\nconst enableBirthdayCalendar = async () => {\n\tawait getCalendarHome().enableBirthdayCalendar()\n\treturn getBirthdayCalendar()\n}\n\n/**\n * Gets the birthday calendar\n *\n * @return {Promise<Calendar>}\n */\nconst getBirthdayCalendar = async () => {\n\treturn getCalendarHome().find(CALDAV_BIRTHDAY_CALENDAR)\n}\n\n/**\n * Returns the Current User Principal\n *\n * @return {Principal}\n */\nconst getCurrentUserPrincipal = () => {\n\treturn getClient().currentUserPrincipal\n}\n\n/**\n * Finds calendar principals by displayname\n *\n * @param {string} term The search-term\n * @return {Promise<void>}\n */\nconst principalPropertySearchByDisplaynameOrEmail = async (term) => {\n\treturn getClient().principalPropertySearchByDisplaynameOrEmail(term)\n}\n\n/**\n * Performs a principal property search based on multiple advanced filters\n *\n * @param {object} query The destructuring query object\n * @param {string=} query.displayName The display name to search for\n * @param {number=} query.capacity The minimum required seating capacity\n * @param {string[]=} query.features The features to filter by\n * @param {string=} query.roomType The room type to filter by\n * @return {Promise<Principal[]>}\n */\nconst advancedPrincipalPropertySearch = async (query) => {\n\treturn getClient().advancedPrincipalPropertySearch(query)\n}\n\n/**\n * Finds one principal by it's URL\n *\n * @param {string} url The principal-url\n * @return {Promise<Principal>}\n */\nconst findPrincipalByUrl = async (url) => {\n\treturn getClient().findPrincipal(url)\n}\n\n/**\n * Finds all principals in a collection at the given URL\n *\n * @param {string} url The URL of the principal collection\n * @param {object} options Passed to cdav-library/Principal::getPropFindList()\n * @return {Promise<Principal[]>}\n */\nconst findPrincipalsInCollection = async (url, options = {}) => {\n\treturn getClient().findPrincipalsInCollection(url, options)\n}\n\nexport {\n\tinitializeClientForUserView,\n\tinitializeClientForPublicView,\n\tfindAll,\n\tfindAllCalendars,\n\tfindAllDeletedCalendars,\n\tfindPublicCalendarsByTokens,\n\tfindSchedulingInbox,\n\tfindSchedulingOutbox,\n\tcreateCalendar,\n\tcreateSubscription,\n\tenableBirthdayCalendar,\n\tgetBirthdayCalendar,\n\tgetCurrentUserPrincipal,\n\tprincipalPropertySearchByDisplaynameOrEmail,\n\tadvancedPrincipalPropertySearch,\n\tfindPrincipalByUrl,\n\tfindPrincipalsInCollection,\n}\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport HTTPClient from '@nextcloud/axios'\nimport { translate as t } from '@nextcloud/l10n'\nimport { generateUrl, generateOcsUrl } from '@nextcloud/router'\nimport { loadState } from '@nextcloud/initial-state'\nimport { getCurrentUser } from '@nextcloud/auth'\nimport logger from '../utils/logger.js'\nimport { removeMailtoPrefix } from '../utils/attendee.js'\n\n/**\n * Creates a new public talk room\n *\n * @param {?string} eventTitle Title of the event\n * @param {?string} eventDescription Description of the event\n * @param {?string[]} attendees Attendees of the event\n *\n * @return {Promise<string>}\n */\nexport async function createTalkRoom(eventTitle = null, eventDescription = null, attendees = []) {\n\tconst apiVersion = loadState('calendar', 'talk_api_version')\n\ttry {\n\t\tconst response = await HTTPClient.post(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room', {\n\t\t\troomType: 3,\n\t\t\troomName: eventTitle || t('calendar', 'Talk conversation for event'),\n\t\t})\n\n\t\tconst conversation = response.data.ocs.data\n\t\tconst token = conversation.token\n\t\tif (eventDescription) {\n\t\t\tawait HTTPClient.put(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token + '/description', {\n\t\t\t\tdescription: eventDescription,\n\t\t\t})\n\t\t}\n\n\t\treturn generateURLForToken(token)\n\t} catch (error) {\n\t\tconsole.debug(error)\n\t\tthrow error\n\t}\n}\n\n/**\n *\n * @param eventComponent\n */\nexport async function updateTalkParticipants(eventComponent) {\n\tconst apiVersion = loadState('calendar', 'talk_api_version')\n\tconst url = eventComponent.getConferenceList()[0]?.uri ?? eventComponent.location\n\tif (!url || !url.startsWith(window.location.protocol + '//' + window.location.host)) {\n\t\tlogger.debug('Event\\'s conference/location is from another host', url)\n\t\treturn\n\t}\n\tconst token = extractCallTokenFromUrl(url)\n\tif (!token) {\n\t\tlogger.debug('URL ' + url + ' contains no call token')\n\t\treturn\n\t}\n\ttry {\n\t\tconst { data: { ocs: { data: room } } } = await HTTPClient.get(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token)\n\t\tconst participantsResponse = await HTTPClient.get(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token + '/participants')\n\t\t// Ignore if the actor isn't owner of the conversation\n\t\tif (!participantsResponse.data.ocs.data.some(participant => participant.actorId === getCurrentUser().uid && participant.participantType <= 2)) {\n\t\t\tlogger.debug('Current user is not a moderator or owner', { currentUser: getCurrentUser().uid, conversation: participantsResponse.data.ocs.data })\n\t\t\treturn\n\t\t}\n\t\tconsole.info('room', room)\n\n\t\tfor (const attendee of eventComponent.getAttendeeIterator()) {\n\t\t\tlogger.debug('Processing attendee', { attendee })\n\t\t\tif (['GROUP', 'RESOURCE', 'ROOM'].includes(attendee.userType)) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tconst participantId = removeMailtoPrefix(attendee.email)\n\t\t\ttry {\n\t\t\t\t// Map attendee email to Nextcloud user uid\n\t\t\t\tconst searchResult = await HTTPClient.get(generateOcsUrl('core/autocomplete/', 2) + 'get?search=' + encodeURIComponent(participantId) + '&itemType=&itemId=%20&shareTypes[]=0&limit=2')\n\t\t\t\t// Only map if there is exactly one result\n\t\t\t\tif (searchResult.data.ocs.data.length === 1 && searchResult.data.ocs.data[0].id !== getCurrentUser().uid) {\n\t\t\t\t\tawait HTTPClient.post(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token + '/participants', {\n\t\t\t\t\t\tnewParticipant: searchResult.data.ocs.data[0].id,\n\t\t\t\t\t\tsource: 'users',\n\t\t\t\t\t})\n\t\t\t\t} else if (searchResult.data.ocs.data[0]?.id === getCurrentUser().uid) {\n\t\t\t\t\tlogger.debug('Skipping organizer ' + searchResult.data.ocs.data[0].id)\n\t\t\t\t} else if (room.type === 3) {\n\t\t\t\t\tawait HTTPClient.post(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token + '/participants', {\n\t\t\t\t\t\tnewParticipant: participantId,\n\t\t\t\t\t\tsource: 'emails',\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug('Attendee ' + participantId + ' ignored as Talk participant')\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tlogger.info('Could not add attendee ' + participantId + ' as Talk participant', { error })\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tlogger.warn('Could not update Talk room attendees', { error })\n\t}\n}\n\n/**\n * Checks whether the value contains a talk link\n *\n * @param {?string} text Haystack\n * @return {boolean}\n */\nexport function doesContainTalkLink(text) {\n\tif (!text) {\n\t\treturn false\n\t}\n\n\t// TODO: there is most definitely a more reliable way,\n\t// but this works for now\n\tconst fakeUrl = generateURLForToken()\n\treturn text.includes(fakeUrl)\n}\n\n/**\n * Generates an absolute URL to the talk room based on the token\n *\n * @param {string} token The token to the call room\n * @return {string}\n */\nexport function generateURLForToken(token = '') {\n\treturn window.location.protocol + '//' + window.location.host + generateUrl('/call/' + token)\n}\n\n/**\n * Extract a spreed call token from the given URL\n *\n * @param {string} callUrl URL of the spreed call\n * @return {string|undefined} Matched token or undefined if URL is invalid\n */\nexport function extractCallTokenFromUrl(callUrl) {\n\treturn callUrl.match(/\\/call\\/([a-z0-9]*)(\\/|#.*)?$/)?.[1] ?? undefined\n}\n","/**\n * SPDX-FileCopyrightText: 2021 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/**\n * Remove the mailto prefix from a URI and return it\n *\n * @param {string} uri URI to remove the prefix from\n * @return {string} URI without a mailto prefix\n */\nexport function removeMailtoPrefix(uri) {\n\tif (typeof uri !== 'string') {\n\t\treturn ''\n\t}\n\n\tif (uri.startsWith('mailto:')) {\n\t\treturn uri.slice(7)\n\t}\n\n\treturn uri\n}\n\n/**\n * Add the mailto prefix to a URI if it doesn't have one yet and return it\n *\n * @param {string} uri URI to add the prefix to\n * @return {string} URI with a mailto prefix\n */\nexport function addMailtoPrefix(uri) {\n\tif (typeof uri !== 'string') {\n\t\treturn 'mailto:'\n\t}\n\n\tif (uri.startsWith('mailto:')) {\n\t\treturn uri\n\t}\n\n\treturn `mailto:${uri}`\n}\n\n/**\n * Get the display name of an organizer\n *\n * @param {?object} organizer Organizer object to extract a display name from\n * @return {string} Display name of given organizer\n */\nexport function organizerDisplayName(organizer) {\n\tif (!organizer) {\n\t\treturn ''\n\t}\n\n\tif (organizer.commonName) {\n\t\treturn organizer.commonName\n\t}\n\n\treturn removeMailtoPrefix(organizer.uri)\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { DateTimeValue } from '@nextcloud/calendar-js'\n\n/**\n * Get all recurrence-items in given range\n *\n * @param {object} calendarObject Calendar-object model\n * @param {Date} start Begin of time-range\n * @param {Date} end End of time-range\n * @return {Array}\n */\nconst getAllObjectsInTimeRange = (calendarObject, start, end) => {\n\tconst iterator = calendarObject.calendarComponent.getVObjectIterator()\n\tconst firstVObject = iterator.next().value\n\tif (!firstVObject) {\n\t\treturn []\n\t}\n\n\tconst s = DateTimeValue.fromJSDate(start, true)\n\tconst e = DateTimeValue.fromJSDate(end, true)\n\treturn firstVObject.recurrenceManager.getAllOccurrencesBetween(s, e)\n}\n\n/**\n * Get recurrence-item at exactly a given recurrence-Id\n *\n * @param {object} calendarObject Calendar-object model\n * @param {Date} recurrenceId RecurrenceId to retrieve\n * @return {AbstractRecurringComponent|null}\n */\nconst getObjectAtRecurrenceId = (calendarObject, recurrenceId) => {\n\tconst iterator = calendarObject.calendarComponent.getVObjectIterator()\n\tconst firstVObject = iterator.next().value\n\tif (!firstVObject) {\n\t\treturn null\n\t}\n\n\tconst d = DateTimeValue.fromJSDate(recurrenceId, true)\n\treturn firstVObject.recurrenceManager.getOccurrenceAtExactly(d)\n}\n\nexport {\n\tgetAllObjectsInTimeRange,\n\tgetObjectAtRecurrenceId,\n}\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport convert from 'color-convert'\nimport { uidToColor } from './uidToColor.js'\nimport css3Colors from 'css-color-names'\nimport closestColor from './closestColor.js'\n\n/**\n * Detect if a color is light or dark\n *\n * @param {object} data The destructuring object\n * @param {number} data.red Red part of the RGB\n * @param {number} data.green Green part of the RGB\n * @param {number} data.blue Blue part of the RGB\n * @return {boolean} true if color is light, false if color is dark\n */\nexport function isLight({ red, green, blue }) {\n\tconst brightness = (((red * 299) + (green * 587) + (blue * 114)) / 1000)\n\treturn (brightness > 130)\n}\n\n/**\n * Get a text-color that's readable on a given background color\n *\n * @param {string} hexColor The hex color to get a text color for\n * @return {string} the matching text color\n */\nexport function generateTextColorForHex(hexColor) {\n\treturn generateTextColorForRGB(hexToRGB(hexColor))\n}\n\n/**\n * Get a text-color that's readable on a given background color\n *\n * @param {object} data The destructuring object\n * @param {number} data.red Red part of the RGB\n * @param {number} data.green Green part of the RGB\n * @param {number} data.blue Blue part of the RGB\n * @return {string}\n */\nexport function generateTextColorForRGB({ red, green, blue }) {\n\treturn isLight({ red, green, blue }) ? '#000000' : '#FAFAFA'\n}\n\n/**\n * Convert hex string to RGB\n *\n * @param {string} hexColor The hex color to convert\n * @return {string} the RGB result\n */\nexport function hexToRGB(hexColor) {\n\tif (hexColor == null) {\n\t\treturn { red: 0, green: 0, blue: 0 }\n\t}\n\tconst [red, green, blue] = convert.hex.rgb(hexColor.slice(1))\n\treturn { red, green, blue }\n}\n\n/**\n * Generates a hex color based on RGB string\n *\n * @param {string} uid The string to generate a color from\n * @return {string} The hex color\n */\nexport function uidToHexColor(uid) {\n\tconst color = uidToColor(uid)\n\treturn '#' + convert.rgb.hex(color.r, color.g, color.b)\n}\n\n/**\n * Detects a color from a given string\n *\n * @param {string} color The color to get the real RGB hex string from\n * @return {string|boolean|*} String if color detected, boolean if not\n */\nexport function detectColor(color) {\n\tif (/^(#)((?:[A-Fa-f0-9]{3}){1,2})$/.test(color)) { // #ff00ff and #f0f\n\t\treturn color\n\t} else if (/^((?:[A-Fa-f0-9]{3}){1,2})$/.test(color)) { // ff00ff and f0f\n\t\treturn '#' + color\n\t} else if (/^(#)((?:[A-Fa-f0-9]{8}))$/.test(color)) { // #ff00ffff and #f0ff\n\t\treturn color.slice(0, 7)\n\t} else if (/^((?:[A-Fa-f0-9]{8}))$/.test(color)) { // ff00ffff and f0ff\n\t\treturn '#' + color.slice(0, 6)\n\t}\n\n\treturn false\n\n}\n\n/**\n * Gets the HEX code for a css3 color name\n *\n * @param {string} colorName The name of the css3 color\n * @return {string | null} string of HEX if valid color, null if not\n */\nexport function getHexForColorName(colorName) {\n\treturn css3Colors[colorName] || null\n}\n\n/**\n * Gets the closest css3 color name for a given HEX code\n *\n * @param {string} hex The HEX code to get a css3 color name for\n * @return {string}\n */\nexport function getClosestCSS3ColorNameForHex(hex) {\n\treturn closestColor(hex)\n}\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport logger from './logger.js'\n\n/**\n * returns a new Date object\n *\n * @return {Date}\n */\nexport function dateFactory() {\n\treturn new Date()\n}\n\n/**\n * formats a Date object as YYYYMMDD\n *\n * @param {Date} date Date to format\n * @return {string}\n */\nexport function getYYYYMMDDFromDate(date) {\n\treturn new Date(date.getTime() - (date.getTimezoneOffset() * 60000))\n\t\t.toISOString()\n\t\t.split('T')[0]\n}\n\n/**\n * get unix time from date object\n *\n * @param {Date} date Date to format\n * @return {number}\n */\nexport function getUnixTimestampFromDate(date) {\n\treturn Math.floor(date.getTime() / 1000)\n}\n\n/**\n * Gets a Date-object based on the firstday param used in routes\n *\n * @param {string} firstDayParam The firstday param from the router\n * @return {Date}\n */\nexport function getDateFromFirstdayParam(firstDayParam) {\n\tif (firstDayParam === 'now') {\n\t\treturn dateFactory()\n\t}\n\n\tconst [year, month, date] = firstDayParam.split('-')\n\t\t.map((str) => parseInt(str, 10))\n\n\tif (Number.isNaN(year) || Number.isNaN(month) || Number.isNaN(date)) {\n\t\tlogger.error('First day parameter contains non-numerical components, falling back to today')\n\t\treturn dateFactory()\n\t}\n\n\tconst dateObject = dateFactory()\n\tdateObject.setFullYear(year, month - 1, date)\n\tdateObject.setHours(0, 0, 0, 0)\n\n\treturn dateObject\n}\n\n/**\n * formats firstday param as YYYYMMDD\n *\n * @param {string} firstDayParam The firstday param from the router\n * @return {string}\n */\nexport function getYYYYMMDDFromFirstdayParam(firstDayParam) {\n\tif (firstDayParam === 'now') {\n\t\treturn getYYYYMMDDFromDate(dateFactory())\n\t}\n\n\treturn firstDayParam\n}\n\n/**\n * Gets a date object based on the given DateTimeValue\n * Ignores given timezone-information\n *\n * @param {DateTimeValue} dateTimeValue Value to get date from\n * @return {Date}\n */\nexport function getDateFromDateTimeValue(dateTimeValue) {\n\treturn new Date(\n\t\tdateTimeValue.year,\n\t\tdateTimeValue.month - 1,\n\t\tdateTimeValue.day,\n\t\tdateTimeValue.hour,\n\t\tdateTimeValue.minute,\n\t\t0,\n\t\t0,\n\t)\n}\n\n/**\n * modifies a date\n *\n * @param {Date} date Date object to modify\n * @param {object} data The destructuring object\n * @param {number} data.day Number of days to add\n * @param {number} data.week Number of weeks to add\n * @param {number} data.month Number of months to add\n * @param data.year\n * @return {Date}\n */\nexport function modifyDate(date, { day = 0, week = 0, month = 0, year = 0 }) {\n\tdate = new Date(date.getTime())\n\tdate.setDate(date.getDate() + day)\n\tdate.setDate(date.getDate() + week * 7)\n\tdate.setMonth(date.getMonth() + month)\n\tdate.setFullYear(date.getFullYear() + year)\n\n\treturn date\n}\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { getLoggerBuilder } from '@nextcloud/logger'\n\nconst logger = getLoggerBuilder()\n\t.setApp('calendar')\n\t.detectUser()\n\t.build()\n\n/**\n * Logs a debug message\n *\n * @param {string} message The message to log\n * @param {object=} context Additional context if needed\n */\nconst logDebug = (message, context = {}) => {\n\tlogger.debug(message, context)\n}\n\n/**\n * Logs an error message\n *\n * @param {string} message The message to log\n * @param {object=} context Additional context if needed\n */\nconst logError = (message, context = {}) => {\n\tlogger.error(message, context)\n}\n\n/**\n * Logs a fatal message\n *\n * @param {string} message The message to log\n * @param {object=} context Additional context if needed\n */\nconst logFatal = (message, context = {}) => {\n\tlogger.fatal(message, context)\n}\n\n/**\n * Logs an info message\n *\n * @param {string} message The message to log\n * @param {object=} context Additional context if needed\n */\nconst logInfo = (message, context = {}) => {\n\tlogger.info(message, context)\n}\n\n/**\n * Logs a warn message\n *\n * @param {string} message The message to log\n * @param {object=} context Additional context if needed\n */\nconst logWarn = (message, context = {}) => {\n\tlogger.warn(message, context)\n}\n\nexport default logger\nexport {\n\tlogDebug,\n\tlogError,\n\tlogFatal,\n\tlogInfo,\n\tlogWarn,\n}\n","var render = function render(){var _vm=this,_c=_vm._self._c;return (_vm.initialized)?_c('FreeBusy',{attrs:{\"dialog-name\":_vm.dialogName,\"start-date\":_vm.startDate,\"end-date\":_vm.endDate,\"organizer\":_vm.organizer,\"attendees\":_vm.attendees,\"disable-find-time\":true},on:{\"add-attendee\":_vm.addAttendee,\"remove-attendee\":_vm.removeAttendee,\"close\":_vm.close}}):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\n  - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<FreeBusy v-if=\"initialized\"\n\t\t:dialog-name=\"dialogName\"\n\t\t:start-date=\"startDate\"\n\t\t:end-date=\"endDate\"\n\t\t:organizer=\"organizer\"\n\t\t:attendees=\"attendees\"\n\t\t:disable-find-time=\"true\"\n\t\t@add-attendee=\"addAttendee\"\n\t\t@remove-attendee=\"removeAttendee\"\n\t\t@close=\"close\" />\n</template>\n\n<script>\nimport { mapStores } from 'pinia'\nimport usePrincipalsStore from '../store/principals.js'\nimport useSettingsStore from '../store/settings.js'\nimport {\n\tmapAttendeePropertyToAttendeeObject,\n\tmapPrincipalObjectToAttendeeObject,\n} from '../models/attendee.js'\nimport loadMomentLocalization from '../utils/moment.js'\nimport { initializeClientForUserView } from '../services/caldavService.js'\nimport getTimezoneManager from '../services/timezoneDataProviderService.js'\nimport FreeBusy from '../components/Editor/FreeBusy/FreeBusy.vue'\nimport { AttendeeProperty } from '@nextcloud/calendar-js'\n\nexport default {\n\tname: 'ContactsMenuAvailability',\n\tcomponents: {\n\t\tFreeBusy,\n\t},\n\tprops: {\n\t\tuserId: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tuserDisplayName: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tuserEmail: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tdata() {\n\t\tconst initialAttendee = AttendeeProperty.fromNameAndEMail(\n\t\t\tthis.userDisplayName,\n\t\t\tthis.userEmail,\n\t\t)\n\t\tconst attendees = [mapAttendeePropertyToAttendeeObject(initialAttendee)]\n\n\t\treturn {\n\t\t\tinitialized: false,\n\t\t\tattendees,\n\t\t}\n\t},\n\tcomputed: {\n\t\t...mapStores(usePrincipalsStore, useSettingsStore),\n\t\tdialogName() {\n\t\t\treturn t('calendar', 'Availability of {displayName}', {\n\t\t\t\tdisplayName: this.userDisplayName,\n\t\t\t})\n\t\t},\n\t\tstartDate() {\n\t\t\treturn new Date()\n\t\t},\n\t\tendDate() {\n\t\t\t// Let's assign a slot of one hour as a default for now\n\t\t\tconst date = new Date(this.startDate)\n\t\t\tdate.setHours(date.getHours() + 1)\n\t\t\treturn date\n\t\t},\n\t\torganizer() {\n\t\t\tif (!this.principalsStore.getCurrentUserPrincipal) {\n\t\t\t\tthrow new Error('No principal available for current user')\n\t\t\t}\n\n\t\t\treturn mapPrincipalObjectToAttendeeObject(\n\t\t\t\tthis.principalsStore.getCurrentUserPrincipal,\n\t\t\t\ttrue,\n\t\t\t)\n\t\t},\n\t},\n\tasync created() {\n\t\tthis.initSettings()\n\t\tawait initializeClientForUserView()\n\t\tawait this.principalsStore.fetchCurrentUserPrincipal()\n\t\tgetTimezoneManager()\n\t\tawait this.loadMomentLocale()\n\t\tthis.initialized = true\n\t},\n\tmethods: {\n\t\tinitSettings() {\n\t\t\tthis.settingsStore.loadSettingsFromServer({\n\t\t\t\ttimezone: 'automatic',\n\t\t\t})\n\t\t\tthis.settingsStore.initializeCalendarJsConfig()\n\t\t},\n\t\tasync loadMomentLocale() {\n\t\t\tconst locale = await loadMomentLocalization()\n\t\t\tthis.settingsStore.setMomentLocale({ locale })\n\t\t},\n\t\taddAttendee({ commonName, email }) {\n\t\t\tthis.attendees.push(mapAttendeePropertyToAttendeeObject(\n\t\t\t\tAttendeeProperty.fromNameAndEMail(commonName, email)\n\t\t\t))\n\t\t},\n\t\tremoveAttendee({ email }) {\n\t\t\tthis.attendees = this.attendees.filter((att) => att.uri !== email)\n\t\t},\n\t\tclose() {\n\t\t\tthis.$destroy()\n\t\t},\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ContactsMenuAvailability.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ContactsMenuAvailability.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ContactsMenuAvailability.vue?vue&type=template&id=74d28dd0&scoped=true\"\nimport script from \"./ContactsMenuAvailability.vue?vue&type=script&lang=js\"\nexport * from \"./ContactsMenuAvailability.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"74d28dd0\",\n  null\n  \n)\n\nexport default component.exports"],"names":["mapAttendeePropertyToAttendeeObject","attendeeProperty","props","arguments","length","undefined","Object","assign","commonName","calendarUserType","participationStatus","role","rsvp","uri","member","getDefaultAttendeeObject","userType","email","mapPrincipalObjectToAttendeeObject","principalObject","isOrganizer","AttendeeProperty","fromNameAndEMail","displayname","emailAddress","COMPONENT_NAME_EVENT","COMPONENT_NAME_JOURNAL","COMPONENT_NAME_VTODO","PRINCIPAL_PREFIX_USER","PRINCIPAL_PREFIX_GROUP","PRINCIPAL_PREFIX_CIRCLE","PRINCIPAL_PREFIX_CALENDAR_RESOURCE","PRINCIPAL_PREFIX_CALENDAR_ROOM","CALDAV_BIRTHDAY_CALENDAR","IMPORT_STAGE_DEFAULT","IMPORT_STAGE_IMPORTING","IMPORT_STAGE_PROCESSING","clients","getClient","headers","clientKey","JSON","stringify","getClientKey","DavClient","rootUrl","generateRemoteUrl","mergedHeaders","requesttoken","getRequestToken","xhr","XMLHttpRequest","oldOpen","open","result","apply","this","name","setRequestHeader","OC","registerXHRForErrorProcessing","initializeClientForUserView","async","connect","enableCalDAV","getCalendarHome","calendarHomes","findAll","findAllCalDAVCollectionsGrouped","findAllDeletedCalendars","findPublicCalendarsByTokens","findPromises","token","tokens","promise","publicCalendarHome","find","catch","push","Promise","all","filter","calendar","findSchedulingOutbox","findAllScheduleOutboxes","createCalendar","displayName","color","components","order","timezoneIcs","createCalendarCollection","createSubscription","source","createSubscribedCollection","enableBirthdayCalendar","getBirthdayCalendar","getCurrentUserPrincipal","currentUserPrincipal","principalPropertySearchByDisplaynameOrEmail","term","findPrincipalByUrl","findPrincipal","url","findPrincipalsInCollection","options","updateTalkParticipants","eventComponent","apiVersion","loadState","getConferenceList","location","startsWith","window","protocol","host","logger","debug","callUrl","match","data","ocs","room","HTTPClient","get","generateOcsUrl","participantsResponse","some","participant","actorId","getCurrentUser","uid","participantType","currentUser","conversation","console","info","attendee","getAttendeeIterator","includes","participantId","removeMailtoPrefix","searchResult","encodeURIComponent","id","post","newParticipant","type","error","warn","slice","getObjectAtRecurrenceId","calendarObject","recurrenceId","firstVObject","calendarComponent","getVObjectIterator","next","value","d","DateTimeValue","fromJSDate","recurrenceManager","getOccurrenceAtExactly","uidToHexColor","uidToColor","convert","hex","r","g","b","detectColor","test","getHexForColorName","colorName","css3Colors","getClosestCSS3ColorNameForHex","closestColor","dateFactory","Date","getUnixTimestampFromDate","date","Math","floor","getTime","getDateFromDateTimeValue","dateTimeValue","year","month","day","hour","minute","getLoggerBuilder","setApp","detectUser","build","logInfo","message","context","FreeBusy","userId","String","required","userDisplayName","userEmail","initialAttendee","initialized","attendees","computed","mapStores","usePrincipalsStore","useSettingsStore","dialogName","t","startDate","endDate","setHours","getHours","organizer","principalsStore","Error","created","initSettings","fetchCurrentUserPrincipal","getTimezoneManager","loadMomentLocale","methods","settingsStore","loadSettingsFromServer","timezone","initializeCalendarJsConfig","locale","loadMomentLocalization","setMomentLocale","addAttendee","_ref","removeAttendee","_ref2","att","close","$destroy","_vm","_c","_self","attrs","on","_e"],"sourceRoot":""}