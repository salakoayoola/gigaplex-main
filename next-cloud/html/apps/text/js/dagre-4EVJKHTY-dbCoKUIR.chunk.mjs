import{_ as m,av as F,aw as L,ax as M,ay as Y,l as a,d as j,az as H,aA as z,ah as _,am as q,ai as D,ag as K,aB as Q,aC as U,aD as V}from"./mermaid.core-B5Ttp9Rj.chunk.mjs";import{G}from"./graph-Buugpx1v.chunk.mjs";import{l as W}from"./layout-CKw2ruhr.chunk.mjs";import{i as x}from"./_baseUniq-BQtPZKT8.chunk.mjs";import{c as Z}from"./clone-D9Jzx18o.chunk.mjs";import{m as k}from"./_basePickBy-C98tXfyr.chunk.mjs";import"./modulepreload-polyfill-DCUwxYMh.chunk.mjs";import"./emoji-picker-Coav-X6q.chunk.mjs";import"./NcNoteCard-C6xb7vi0-D5KgAKsm.chunk.mjs";import"./index-CJ7wDv5l.chunk.mjs";import"./vue.runtime.esm-DuKaSI2H.chunk.mjs";function X(e){var r={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:$(e),edges:ee(e)};return x(e.graph())||(r.value=Z(e.graph())),r}function $(e){return k(e.nodes(),function(r){var n=e.node(r),d=e.parent(r),c={v:r};return x(n)||(c.value=n),x(d)||(c.parent=d),c})}function ee(e){return k(e.edges(),function(r){var n=e.edge(r),d={v:r.v,w:r.w};return x(r.name)||(d.name=r.name),x(n)||(d.value=n),d})}var l=new Map,N=new Map,B=new Map,ne=m(()=>{N.clear(),B.clear(),l.clear()},"clear"),I=m((e,r)=>{const n=N.get(r)||[];return a.trace("In isDescendant",r," ",e," = ",n.includes(e)),n.includes(e)},"isDescendant"),re=m((e,r)=>{const n=N.get(r)||[];return a.info("Descendants of ",r," is ",n),a.info("Edge is ",e),e.v===r||e.w===r?!1:n?n.includes(e.v)||I(e.v,r)||I(e.w,r)||n.includes(e.w):(a.debug("Tilt, ",r,",not in descendants"),!1)},"edgeInCluster"),P=m((e,r,n,d)=>{a.warn("Copying children of ",e,"root",d,"data",r.node(e),d);const c=r.children(e)||[];e!==d&&c.push(e),a.warn("Copying (nodes) clusterId",e,"nodes",c),c.forEach(s=>{if(r.children(s).length>0)P(s,r,n,d);else{const i=r.node(s);a.info("cp ",s," to ",d," with parent ",e),n.setNode(s,i),d!==r.parent(s)&&(a.warn("Setting parent",s,r.parent(s)),n.setParent(s,r.parent(s))),e!==d&&s!==e?(a.debug("Setting parent",s,e),n.setParent(s,e)):(a.info("In copy ",e,"root",d,"data",r.node(e),d),a.debug("Not Setting parent for node=",s,"cluster!==rootId",e!==d,"node!==clusterId",s!==e));const o=r.edges(s);a.debug("Copying Edges",o),o.forEach(p=>{a.info("Edge",p);const E=r.edge(p.v,p.w,p.name);a.info("Edge data",E,d);try{re(p,d)?(a.info("Copying as ",p.v,p.w,E,p.name),n.setEdge(p.v,p.w,E,p.name),a.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):a.info("Skipping copy of edge ",p.v,"-->",p.w," rootId: ",d," clusterId:",e)}catch(b){a.error(b)}})}a.debug("Removing node",s),r.removeNode(s)})},"copy"),A=m((e,r)=>{const n=r.children(e);let d=[...n];for(const c of n)B.set(c,e),d=[...d,...A(c,r)];return d},"extractDescendants"),te=m((e,r,n)=>{const d=e.edges().filter(o=>o.v===r||o.w===r),c=e.edges().filter(o=>o.v===n||o.w===n),s=d.map(o=>({v:o.v===r?n:o.v,w:o.w===r?r:o.w})),i=c.map(o=>({v:o.v,w:o.w}));return s.filter(o=>i.some(p=>o.v===p.v&&o.w===p.w))},"findCommonEdges"),S=m((e,r,n)=>{const d=r.children(e);if(a.trace("Searching children of id ",e,d),d.length<1)return e;let c;for(const s of d){const i=S(s,r,n),o=te(r,n,i);if(i)if(o.length>0)c=i;else return i}return c},"findNonClusterChild"),O=m(e=>!l.has(e)||!l.get(e).externalConnections?e:l.has(e)?l.get(e).id:e,"getAnchorId"),ae=m((e,r)=>{if(!e||r>10){a.debug("Opting out, no graph ");return}else a.debug("Opting in, graph ");e.nodes().forEach(function(n){e.children(n).length>0&&(a.warn("Cluster identified",n," Replacement id in edges: ",S(n,e,n)),N.set(n,A(n,e)),l.set(n,{id:S(n,e,n),clusterData:e.node(n)}))}),e.nodes().forEach(function(n){const d=e.children(n),c=e.edges();d.length>0?(a.debug("Cluster identified",n,N),c.forEach(s=>{const i=I(s.v,n),o=I(s.w,n);i^o&&(a.warn("Edge: ",s," leaves cluster ",n),a.warn("Descendants of XXX ",n,": ",N.get(n)),l.get(n).externalConnections=!0)})):a.debug("Not a cluster ",n,N)});for(let n of l.keys()){const d=l.get(n).id,c=e.parent(d);c!==n&&l.has(c)&&!l.get(c).externalConnections&&(l.get(n).id=c)}e.edges().forEach(function(n){const d=e.edge(n);a.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),a.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let c=n.v,s=n.w;if(a.warn("Fix XXX",l,"ids:",n.v,n.w,"Translating: ",l.get(n.v)," --- ",l.get(n.w)),l.get(n.v)||l.get(n.w)){if(a.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),c=O(n.v),s=O(n.w),e.removeEdge(n.v,n.w,n.name),c!==n.v){const i=e.parent(c);l.get(i).externalConnections=!0,d.fromCluster=n.v}if(s!==n.w){const i=e.parent(s);l.get(i).externalConnections=!0,d.toCluster=n.w}a.warn("Fix Replacing with XXX",c,s,n.name),e.setEdge(c,s,d,n.name)}}),a.warn("Adjusted Graph",X(e)),J(e,0),a.trace(l)},"adjustClustersAndEdges"),J=m((e,r)=>{var c,s;if(a.warn("extractor - ",r,X(e),e.children("D")),r>10){a.error("Bailing out");return}let n=e.nodes(),d=!1;for(const i of n){const o=e.children(i);d=d||o.length>0}if(!d){a.debug("Done, no node has children",e.nodes());return}a.debug("Nodes = ",n,r);for(const i of n)if(a.debug("Extracting node",i,l,l.has(i)&&!l.get(i).externalConnections,!e.parent(i),e.node(i),e.children("D")," Depth ",r),!l.has(i))a.debug("Not a cluster",i,r);else if(!l.get(i).externalConnections&&e.children(i)&&e.children(i).length>0){a.warn("Cluster without external connections, without a parent and with children",i,r);let o=e.graph().rankdir==="TB"?"LR":"TB";(s=(c=l.get(i))==null?void 0:c.clusterData)!=null&&s.dir&&(o=l.get(i).clusterData.dir,a.warn("Fixing dir",l.get(i).clusterData.dir,o));const p=new G({multigraph:!0,compound:!0}).setGraph({rankdir:o,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});a.warn("Old graph before copy",X(e)),P(i,e,p,i),e.setNode(i,{clusterNode:!0,id:i,clusterData:l.get(i).clusterData,label:l.get(i).label,graph:p}),a.warn("New graph after copy node: (",i,")",X(p)),a.debug("Old graph after copy",X(e))}else a.warn("Cluster ** ",i," **not meeting the criteria !externalConnections:",!l.get(i).externalConnections," no parent: ",!e.parent(i)," children ",e.children(i)&&e.children(i).length>0,e.children("D"),r),a.debug(l);n=e.nodes(),a.warn("New list of nodes",n);for(const i of n){const o=e.node(i);a.warn(" Now next level",i,o),o!=null&&o.clusterNode&&J(o.graph,r+1)}},"extractor"),R=m((e,r)=>{if(r.length===0)return[];let n=Object.assign([],r);return r.forEach(d=>{const c=e.children(d),s=R(e,c);n=[...n,...s]}),n},"sorter"),ie=m(e=>R(e,e.children()),"sortNodesByHierarchy"),T=m(async(e,r,n,d,c,s)=>{a.warn("Graph in recursive render:XAX",X(r),c);const i=r.graph().rankdir;a.trace("Dir in recursive render - dir:",i);const o=e.insert("g").attr("class","root");r.nodes()?a.info("Recursive render XXX",r.nodes()):a.info("No nodes found for",r),r.edges().length>0&&a.info("Recursive edges",r.edge(r.edges()[0]));const p=o.insert("g").attr("class","clusters"),E=o.insert("g").attr("class","edgePaths"),b=o.insert("g").attr("class","edgeLabels"),h=o.insert("g").attr("class","nodes");await Promise.all(r.nodes().map(async function(g){const t=r.node(g);if(c!==void 0){const f=JSON.parse(JSON.stringify(c.clusterData));a.trace("Setting data for parent cluster XXX\n Node.id = ",g,"\n data=",f.height,"\nParent cluster",c.height),r.setNode(c.id,f),r.parent(g)||(a.trace("Setting parent",g,c.id),r.setParent(g,c.id,f))}if(a.info("(Insert) Node XXX"+g+": "+JSON.stringify(r.node(g))),t==null?void 0:t.clusterNode){a.info("Cluster identified XBX",g,t.width,r.node(g));const{ranksep:f,nodesep:w}=r.graph();t.graph.setGraph({...t.graph.graph(),ranksep:f+25,nodesep:w});const v=await T(h,t.graph,n,d,r.node(g),s),C=v.elem;H(t,C),t.diff=v.diff||0,a.info("New compound node after recursive render XAX",g,"width",t.width,"height",t.height),z(C,t)}else r.children(g).length>0?(a.trace("Cluster - the non recursive path XBX",g,t.id,t,t.width,"Graph:",r),a.trace(S(t.id,r)),l.set(t.id,{id:S(t.id,r),node:t})):(a.trace("Node - the non recursive path XAX",g,h,r.node(g),i),await _(h,r.node(g),{config:s,dir:i}))})),await m(async()=>{const g=r.edges().map(async function(t){const f=r.edge(t.v,t.w,t.name);a.info("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),a.info("Edge "+t.v+" -> "+t.w+": ",t," ",JSON.stringify(r.edge(t))),a.info("Fix",l,"ids:",t.v,t.w,"Translating: ",l.get(t.v),l.get(t.w)),await V(b,f)});await Promise.all(g)},"processEdges")(),a.info("Graph before layout:",JSON.stringify(X(r))),a.info("############################################# XXX"),a.info("###                Layout                 ### XXX"),a.info("############################################# XXX"),W(r),a.info("Graph after layout:",JSON.stringify(X(r)));let u=0,{subGraphTitleTotalMargin:y}=q(s);return await Promise.all(ie(r).map(async function(g){var f;const t=r.node(g);if(a.info("Position XBX => "+g+": ("+t.x,","+t.y,") width: ",t.width," height: ",t.height),t==null?void 0:t.clusterNode)t.y+=y,a.info("A tainted cluster node XBX1",g,t.id,t.width,t.height,t.x,t.y,r.parent(g)),l.get(t.id).node=t,D(t);else if(r.children(g).length>0){a.info("A pure cluster node XBX1",g,t.id,t.x,t.y,t.width,t.height,r.parent(g)),t.height+=y,r.node(t.parentId);const w=(t==null?void 0:t.padding)/2||0,v=((f=t==null?void 0:t.labelBBox)==null?void 0:f.height)||0,C=v-w||0;a.debug("OffsetY",C,"labelHeight",v,"halfPadding",w),await K(p,t),l.get(t.id).node=t}else{const w=r.node(t.parentId);t.y+=y/2,a.info("A regular node XBX1 - using the padding",t.id,"parent",t.parentId,t.width,t.height,t.x,t.y,"offsetY",t.offsetY,"parent",w,w==null?void 0:w.offsetY,t),D(t)}})),r.edges().forEach(function(g){const t=r.edge(g);a.info("Edge "+g.v+" -> "+g.w+": "+JSON.stringify(t),t),t.points.forEach(C=>C.y+=y/2);const f=r.node(g.v);var w=r.node(g.w);const v=Q(E,t,l,n,f,w,d);U(t,v)}),r.nodes().forEach(function(g){const t=r.node(g);a.info(g,t.type,t.diff),t.isGroup&&(u=t.diff)}),a.warn("Returning from recursive render XAX",o,u),{elem:o,diff:u}},"recursiveRender"),me=m(async(e,r)=>{var s,i,o,p,E,b;const n=new G({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:((s=e.config)==null?void 0:s.nodeSpacing)||((o=(i=e.config)==null?void 0:i.flowchart)==null?void 0:o.nodeSpacing)||e.nodeSpacing,ranksep:((p=e.config)==null?void 0:p.rankSpacing)||((b=(E=e.config)==null?void 0:E.flowchart)==null?void 0:b.rankSpacing)||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),d=r.select("g");F(d,e.markers,e.type,e.diagramId),L(),M(),Y(),ne(),e.nodes.forEach(h=>{n.setNode(h.id,{...h}),h.parentId&&n.setParent(h.id,h.parentId)}),a.debug("Edges:",e.edges),e.edges.forEach(h=>{if(h.start===h.end){const u=h.start,y=u+"---"+u+"---1",g=u+"---"+u+"---2",t=n.node(u);n.setNode(y,{domId:y,id:y,parentId:t.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),n.setParent(y,t.parentId),n.setNode(g,{domId:g,id:g,parentId:t.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),n.setParent(g,t.parentId);const f=structuredClone(h),w=structuredClone(h),v=structuredClone(h);f.label="",f.arrowTypeEnd="none",f.id=u+"-cyclic-special-1",w.arrowTypeEnd="none",w.id=u+"-cyclic-special-mid",v.label="",t.isGroup&&(f.fromCluster=u,v.toCluster=u),v.id=u+"-cyclic-special-2",n.setEdge(u,y,f,u+"-cyclic-special-0"),n.setEdge(y,g,w,u+"-cyclic-special-1"),n.setEdge(g,u,v,u+"-cyc<lic-special-2")}else n.setEdge(h.start,h.end,{...h},h.id)}),a.warn("Graph at first:",JSON.stringify(X(n))),ae(n),a.warn("Graph after XAX:",JSON.stringify(X(n)));const c=j();await T(d,n,e.type,e.diagramId,void 0,c)},"render");export{me as render};
