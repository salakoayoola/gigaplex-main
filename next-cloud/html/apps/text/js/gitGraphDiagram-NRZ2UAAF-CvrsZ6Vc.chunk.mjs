import{p as Q}from"./chunk-TMUBEWPD-Cn9Jkkz7.chunk.mjs";import{I as X}from"./chunk-KFBOBJHC-C8W-YHqC.chunk.mjs";import{D as Z,_ as m,d as rr,E as tr,F as er,G as or,l as B,s as ar,g as nr,b as cr,c as ir,q as sr,r as hr,e as T,x as dr,j as mr,v as $r,H as lr}from"./mermaid.core-B5Ttp9Rj.chunk.mjs";import{p as gr}from"./gitGraph-YCYPL57B-DxhbeaEF.chunk.mjs";import"./modulepreload-polyfill-DCUwxYMh.chunk.mjs";import"./emoji-picker-Coav-X6q.chunk.mjs";import"./NcNoteCard-C6xb7vi0-D5KgAKsm.chunk.mjs";import"./index-CJ7wDv5l.chunk.mjs";import"./vue.runtime.esm-DuKaSI2H.chunk.mjs";import"./_baseUniq-BQtPZKT8.chunk.mjs";import"./_basePickBy-C98tXfyr.chunk.mjs";import"./clone-D9Jzx18o.chunk.mjs";var f={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yr=Z.gitGraph,G=m(()=>tr({...yr,...er().gitGraph}),"getConfig"),s=new X(()=>{const e=G(),r=e.mainBranchName,o=e.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:o}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function D(){return or({length:7})}m(D,"getID");function _(e,r){const o=Object.create(null);return e.reduce((n,t)=>{const a=r(t);return o[a]||(o[a]=!0,n.push(t)),n},[])}m(_,"uniqBy");var pr=m(function(e){s.records.direction=e},"setDirection"),fr=m(function(e){B.debug("options str",e),e=e==null?void 0:e.trim(),e=e||"{}";try{s.records.options=JSON.parse(e)}catch(r){B.error("error while parsing gitGraph options",r.message)}},"setOptions"),xr=m(function(){return s.records.options},"getOptions"),ur=m(function(e){let r=e.msg,o=e.id;const n=e.type;let t=e.tags;B.info("commit",r,o,n,t),B.debug("Entering commit:",r,o,n,t);const a=G();o=T.sanitizeText(o,a),r=T.sanitizeText(r,a),t=t==null?void 0:t.map(c=>T.sanitizeText(c,a));const i={id:o||s.records.seq+"-"+D(),message:r,seq:s.records.seq++,type:n!=null?n:f.NORMAL,tags:t!=null?t:[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=i,B.info("main branch",a.mainBranchName),s.records.commits.set(i.id,i),s.records.branches.set(s.records.currBranch,i.id),B.debug("in pushCommit "+i.id)},"commit"),br=m(function(e){let r=e.name;const o=e.order;if(r=T.sanitizeText(r,G()),s.records.branches.has(r))throw new Error('Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout '.concat(r,'")'));s.records.branches.set(r,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(r,{name:r,order:o}),K(r),B.debug("in createBranch")},"branch"),wr=m(e=>{let r=e.branch,o=e.id;const n=e.type,t=e.tags,a=G();r=T.sanitizeText(r,a),o&&(o=T.sanitizeText(o,a));const i=s.records.branches.get(s.records.currBranch),c=s.records.branches.get(r),d=i?s.records.commits.get(i):void 0,$=c?s.records.commits.get(c):void 0;if(d&&$&&d.branch===r)throw new Error("Cannot merge branch '".concat(r,"' into itself."));if(s.records.currBranch===r){const h=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw h.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:["branch abc"]},h}if(d===void 0||!d){const h=new Error('Incorrect usage of "merge". Current branch ('.concat(s.records.currBranch,")has no commits"));throw h.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:["commit"]},h}if(!s.records.branches.has(r)){const h=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw h.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:["branch ".concat(r)]},h}if($===void 0||!$){const h=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw h.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:['"commit"']},h}if(d===$){const h=new Error('Incorrect usage of "merge". Both branches have same head');throw h.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:["branch abc"]},h}if(o&&s.records.commits.has(o)){const h=new Error('Incorrect usage of "merge". Commit with id:'+o+" already exists, use different custom Id");throw h.hash={text:"merge ".concat(r," ").concat(o," ").concat(n," ").concat(t==null?void 0:t.join(" ")),token:"merge ".concat(r," ").concat(o," ").concat(n," ").concat(t==null?void 0:t.join(" ")),expected:["merge ".concat(r," ").concat(o,"_UNIQUE ").concat(n," ").concat(t==null?void 0:t.join(" "))]},h}const l=c||"",g={id:o||"".concat(s.records.seq,"-").concat(D()),message:"merged branch ".concat(r," into ").concat(s.records.currBranch),seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,l],branch:s.records.currBranch,type:f.MERGE,customType:n,customId:!!o,tags:t!=null?t:[]};s.records.head=g,s.records.commits.set(g.id,g),s.records.branches.set(s.records.currBranch,g.id),B.debug(s.records.branches),B.debug("in mergeBranch")},"merge"),Br=m(function(e){let r=e.id,o=e.targetId,n=e.tags,t=e.parent;B.debug("Entering cherryPick:",r,o,n);const a=G();if(r=T.sanitizeText(r,a),o=T.sanitizeText(o,a),n=n==null?void 0:n.map(d=>T.sanitizeText(d,a)),t=T.sanitizeText(t,a),!r||!s.records.commits.has(r)){const d=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw d.hash={text:"cherryPick ".concat(r," ").concat(o),token:"cherryPick ".concat(r," ").concat(o),expected:["cherry-pick abc"]},d}const i=s.records.commits.get(r);if(i===void 0||!i)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(t&&!(Array.isArray(i.parents)&&i.parents.includes(t)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=i.branch;if(i.type===f.MERGE&&!t)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!o||!s.records.commits.has(o)){if(c===s.records.currBranch){const g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:"cherryPick ".concat(r," ").concat(o),token:"cherryPick ".concat(r," ").concat(o),expected:["cherry-pick abc"]},g}const d=s.records.branches.get(s.records.currBranch);if(d===void 0||!d){const g=new Error('Incorrect usage of "cherry-pick". Current branch ('.concat(s.records.currBranch,")has no commits"));throw g.hash={text:"cherryPick ".concat(r," ").concat(o),token:"cherryPick ".concat(r," ").concat(o),expected:["cherry-pick abc"]},g}const $=s.records.commits.get(d);if($===void 0||!$){const g=new Error('Incorrect usage of "cherry-pick". Current branch ('.concat(s.records.currBranch,")has no commits"));throw g.hash={text:"cherryPick ".concat(r," ").concat(o),token:"cherryPick ".concat(r," ").concat(o),expected:["cherry-pick abc"]},g}const l={id:s.records.seq+"-"+D(),message:"cherry-picked ".concat(i==null?void 0:i.message," into ").concat(s.records.currBranch),seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,i.id],branch:s.records.currBranch,type:f.CHERRY_PICK,tags:n?n.filter(Boolean):["cherry-pick:".concat(i.id).concat(i.type===f.MERGE?"|parent:".concat(t):"")]};s.records.head=l,s.records.commits.set(l.id,l),s.records.branches.set(s.records.currBranch,l.id),B.debug(s.records.branches),B.debug("in cherryPick")}},"cherryPick"),K=m(function(e){var r;if(e=T.sanitizeText(e,G()),s.records.branches.has(e)){s.records.currBranch=e;const o=s.records.branches.get(s.records.currBranch);o===void 0||!o?s.records.head=null:s.records.head=(r=s.records.commits.get(o))!=null?r:null}else{const o=new Error('Trying to checkout branch which is not yet created. (Help try using "branch '.concat(e,'")'));throw o.hash={text:"checkout ".concat(e),token:"checkout ".concat(e),expected:["branch ".concat(e)]},o}},"checkout");function W(e,r,o){const n=e.indexOf(r);n===-1?e.push(o):e.splice(n,1,o)}m(W,"upsert");function j(e){const r=e.reduce((t,a)=>t.seq>a.seq?t:a,e[0]);let o="";e.forEach(function(t){t===r?o+="	*":o+="	|"});const n=[o,r.id,r.seq];for(const t in s.records.branches)s.records.branches.get(t)===r.id&&n.push(t);if(B.debug(n.join(" ")),r.parents&&r.parents.length==2&&r.parents[0]&&r.parents[1]){const t=s.records.commits.get(r.parents[0]);W(e,r,t),r.parents[1]&&e.push(s.records.commits.get(r.parents[1]))}else{if(r.parents.length==0)return;if(r.parents[0]){const t=s.records.commits.get(r.parents[0]);W(e,r,t)}}e=_(e,t=>t.id),j(e)}m(j,"prettyPrintCommitHistory");var Er=m(function(){B.debug(s.records.commits);const e=Y()[0];j([e])},"prettyPrint"),kr=m(function(){s.reset(),dr()},"clear"),Cr=m(function(){return[...s.records.branchConfig.values()].map((e,r)=>e.order!==null&&e.order!==void 0?e:{...e,order:parseFloat("0.".concat(r))}).sort((e,r)=>{var o,n;return((o=e.order)!=null?o:0)-((n=r.order)!=null?n:0)}).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),Lr=m(function(){return s.records.branches},"getBranches"),Tr=m(function(){return s.records.commits},"getCommits"),Y=m(function(){const e=[...s.records.commits.values()];return e.forEach(function(r){B.debug(r.id)}),e.sort((r,o)=>r.seq-o.seq),e},"getCommitsArray"),Mr=m(function(){return s.records.currBranch},"getCurrentBranch"),vr=m(function(){return s.records.direction},"getDirection"),Pr=m(function(){return s.records.head},"getHead"),U={commitType:f,getConfig:G,setDirection:pr,setOptions:fr,getOptions:xr,commit:ur,branch:br,merge:wr,cherryPick:Br,checkout:K,prettyPrint:Er,clear:kr,getBranchesAsObjArray:Cr,getBranches:Lr,getCommits:Tr,getCommitsArray:Y,getCurrentBranch:Mr,getDirection:vr,getHead:Pr,setAccTitle:ar,getAccTitle:nr,getAccDescription:cr,setAccDescription:ir,setDiagramTitle:sr,getDiagramTitle:hr},Rr=m((e,r)=>{Q(e,r),e.dir&&r.setDirection(e.dir);for(const o of e.statements)Ir(o,r)},"populate"),Ir=m((e,r)=>{const o={Commit:m(n=>r.commit(Ar(n)),"Commit"),Branch:m(n=>r.branch(Gr(n)),"Branch"),Merge:m(n=>r.merge(Or(n)),"Merge"),Checkout:m(n=>r.checkout(qr(n)),"Checkout"),CherryPicking:m(n=>r.cherryPick(Hr(n)),"CherryPicking")}[e.$type];o?o(e):B.error("Unknown statement type: ".concat(e.$type))},"parseStatement"),Ar=m(e=>{var r,o;return{id:e.id,msg:(r=e.message)!=null?r:"",type:e.type!==void 0?f[e.type]:f.NORMAL,tags:(o=e.tags)!=null?o:void 0}},"parseCommit"),Gr=m(e=>{var r;return{name:e.name,order:(r=e.order)!=null?r:0}},"parseBranch"),Or=m(e=>{var r,o;return{branch:e.branch,id:(r=e.id)!=null?r:"",type:e.type!==void 0?f[e.type]:void 0,tags:(o=e.tags)!=null?o:void 0}},"parseMerge"),qr=m(e=>e.branch,"parseCheckout"),Hr=m(e=>{var r;return{id:e.id,targetId:"",tags:((r=e.tags)==null?void 0:r.length)===0?void 0:e.tags,parent:e.parent}},"parseCherryPicking"),zr={parse:m(async e=>{const r=await gr("gitGraph",e);B.debug(r),Rr(r,U)},"parse")},N=rr(),u=N==null?void 0:N.gitGraph,R=10,I=40,M=4,v=2,A=8,E=new Map,k=new Map,z=30,q=new Map,S=[],P=0,y="LR",Sr=m(()=>{E.clear(),k.clear(),q.clear(),P=0,S=[],y="LR"},"clear"),V=m(e=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof e=="string"?e.split(/\\n|\n|<br\s*\/?>/gi):e).forEach(o=>{const n=document.createElementNS("http://www.w3.org/2000/svg","tspan");n.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),n.setAttribute("dy","1em"),n.setAttribute("x","0"),n.setAttribute("class","row"),n.textContent=o.trim(),r.appendChild(n)}),r},"drawText"),J=m(e=>{let r,o,n;return y==="BT"?(o=m((t,a)=>t<=a,"comparisonFunc"),n=1/0):(o=m((t,a)=>t>=a,"comparisonFunc"),n=0),e.forEach(t=>{var i,c;const a=y==="TB"||y=="BT"?(i=k.get(t))==null?void 0:i.y:(c=k.get(t))==null?void 0:c.x;a!==void 0&&o(a,n)&&(r=t,n=a)}),r},"findClosestParent"),Dr=m(e=>{let r="",o=1/0;return e.forEach(n=>{const t=k.get(n).y;t<=o&&(r=n,o=t)}),r||void 0},"findClosestParentBT"),Nr=m((e,r,o)=>{let n=o,t=o;const a=[];e.forEach(i=>{const c=r.get(i);if(!c)throw new Error("Commit not found for key ".concat(i));c.parents.length?(n=jr(c),t=Math.max(n,t)):a.push(c),Fr(c,n)}),n=t,a.forEach(i=>{_r(i,n,o)}),e.forEach(i=>{const c=r.get(i);if(c!=null&&c.parents.length){const d=Dr(c.parents);n=k.get(d).y-I,n<=t&&(t=n);const $=E.get(c.branch).pos,l=n-R;k.set(c.id,{x:$,y:l})}})},"setParallelBTPos"),Wr=m(e=>{var n;const r=J(e.parents.filter(t=>t!==null));if(!r)throw new Error("Closest parent not found for commit ".concat(e.id));const o=(n=k.get(r))==null?void 0:n.y;if(o===void 0)throw new Error("Closest parent position not found for commit ".concat(e.id));return o},"findClosestParentPos"),jr=m(e=>Wr(e)+I,"calculateCommitPosition"),Fr=m((e,r)=>{const o=E.get(e.branch);if(!o)throw new Error("Branch not found for commit ".concat(e.id));const n=o.pos,t=r+R;return k.set(e.id,{x:n,y:t}),{x:n,y:t}},"setCommitPosition"),_r=m((e,r,o)=>{const n=E.get(e.branch);if(!n)throw new Error("Branch not found for commit ".concat(e.id));const t=r+o,a=n.pos;k.set(e.id,{x:a,y:t})},"setRootPosition"),Kr=m((e,r,o,n,t,a)=>{if(a===f.HIGHLIGHT)e.append("rect").attr("x",o.x-10).attr("y",o.y-10).attr("width",20).attr("height",20).attr("class","commit ".concat(r.id," commit-highlight").concat(t%A," ").concat(n,"-outer")),e.append("rect").attr("x",o.x-6).attr("y",o.y-6).attr("width",12).attr("height",12).attr("class","commit ".concat(r.id," commit").concat(t%A," ").concat(n,"-inner"));else if(a===f.CHERRY_PICK)e.append("circle").attr("cx",o.x).attr("cy",o.y).attr("r",10).attr("class","commit ".concat(r.id," ").concat(n)),e.append("circle").attr("cx",o.x-3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class","commit ".concat(r.id," ").concat(n)),e.append("circle").attr("cx",o.x+3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class","commit ".concat(r.id," ").concat(n)),e.append("line").attr("x1",o.x+3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class","commit ".concat(r.id," ").concat(n)),e.append("line").attr("x1",o.x-3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class","commit ".concat(r.id," ").concat(n));else{const i=e.append("circle");if(i.attr("cx",o.x),i.attr("cy",o.y),i.attr("r",r.type===f.MERGE?9:10),i.attr("class","commit ".concat(r.id," commit").concat(t%A)),a===f.MERGE){const c=e.append("circle");c.attr("cx",o.x),c.attr("cy",o.y),c.attr("r",6),c.attr("class","commit ".concat(n," ").concat(r.id," commit").concat(t%A))}a===f.REVERSE&&e.append("path").attr("d","M ".concat(o.x-5,",").concat(o.y-5,"L").concat(o.x+5,",").concat(o.y+5,"M").concat(o.x-5,",").concat(o.y+5,"L").concat(o.x+5,",").concat(o.y-5)).attr("class","commit ".concat(n," ").concat(r.id," commit").concat(t%A))}},"drawCommitBullet"),Yr=m((e,r,o,n)=>{var t;if(r.type!==f.CHERRY_PICK&&(r.customId&&r.type===f.MERGE||r.type!==f.MERGE)&&(u!=null&&u.showCommitLabel)){const a=e.append("g"),i=a.insert("rect").attr("class","commit-label-bkg"),c=a.append("text").attr("x",n).attr("y",o.y+25).attr("class","commit-label").text(r.id),d=(t=c.node())==null?void 0:t.getBBox();if(d&&(i.attr("x",o.posWithOffset-d.width/2-v).attr("y",o.y+13.5).attr("width",d.width+2*v).attr("height",d.height+2*v),y==="TB"||y==="BT"?(i.attr("x",o.x-(d.width+4*M+5)).attr("y",o.y-12),c.attr("x",o.x-(d.width+4*M)).attr("y",o.y+d.height-12)):c.attr("x",o.posWithOffset-d.width/2),u.rotateCommitLabel))if(y==="TB"||y==="BT")c.attr("transform","rotate(-45, "+o.x+", "+o.y+")"),i.attr("transform","rotate(-45, "+o.x+", "+o.y+")");else{const $=-7.5-(d.width+10)/25*9.5,l=10+d.width/25*8.5;a.attr("transform","translate("+$+", "+l+") rotate(-45, "+n+", "+o.y+")")}}},"drawCommitLabel"),Ur=m((e,r,o,n)=>{var t;if(r.tags.length>0){let a=0,i=0,c=0;const d=[];for(const $ of r.tags.reverse()){const l=e.insert("polygon"),g=e.append("circle"),h=e.append("text").attr("y",o.y-16-a).attr("class","tag-label").text($),p=(t=h.node())==null?void 0:t.getBBox();if(!p)throw new Error("Tag bbox not found");i=Math.max(i,p.width),c=Math.max(c,p.height),h.attr("x",o.posWithOffset-p.width/2),d.push({tag:h,hole:g,rect:l,yOffset:a}),a+=20}for(const{tag:$,hole:l,rect:g,yOffset:h}of d){const p=c/2,b=o.y-19.2-h;if(g.attr("class","tag-label-bkg").attr("points","\n      ".concat(n-i/2-M/2,",").concat(b+v,"  \n      ").concat(n-i/2-M/2,",").concat(b-v,"\n      ").concat(o.posWithOffset-i/2-M,",").concat(b-p-v,"\n      ").concat(o.posWithOffset+i/2+M,",").concat(b-p-v,"\n      ").concat(o.posWithOffset+i/2+M,",").concat(b+p+v,"\n      ").concat(o.posWithOffset-i/2-M,",").concat(b+p+v)),l.attr("cy",b).attr("cx",n-i/2+M/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){const x=n+h;g.attr("class","tag-label-bkg").attr("points","\n        ".concat(o.x,",").concat(x+2,"\n        ").concat(o.x,",").concat(x-2,"\n        ").concat(o.x+R,",").concat(x-p-2,"\n        ").concat(o.x+R+i+4,",").concat(x-p-2,"\n        ").concat(o.x+R+i+4,",").concat(x+p+2,"\n        ").concat(o.x+R,",").concat(x+p+2)).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),l.attr("cx",o.x+M/2).attr("cy",x).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),$.attr("x",o.x+5).attr("y",x+3).attr("transform","translate(14,14) rotate(45, "+o.x+","+n+")")}}}},"drawCommitTags"),Vr=m(e=>{var r;switch((r=e.customType)!=null?r:e.type){case f.NORMAL:return"commit-normal";case f.REVERSE:return"commit-reverse";case f.HIGHLIGHT:return"commit-highlight";case f.MERGE:return"commit-merge";case f.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Jr=m((e,r,o,n)=>{var a,i,c;const t={x:0,y:0};if(e.parents.length>0){const d=J(e.parents);if(d){const $=(a=n.get(d))!=null?a:t;return r==="TB"?$.y+I:r==="BT"?((i=n.get(e.id))!=null?i:t).y-I:$.x+I}}else return r==="TB"?z:r==="BT"?((c=n.get(e.id))!=null?c:t).y-I:0;return 0},"calculatePosition"),Qr=m((e,r,o)=>{var i,c;const n=y==="BT"&&o?r:r+R,t=y==="TB"||y==="BT"?n:(i=E.get(e.branch))==null?void 0:i.pos,a=y==="TB"||y==="BT"?(c=E.get(e.branch))==null?void 0:c.pos:n;if(a===void 0||t===void 0)throw new Error("Position were undefined for commit ".concat(e.id));return{x:a,y:t,posWithOffset:n}},"getCommitPosition"),F=m((e,r,o)=>{var l;if(!u)throw new Error("GitGraph config not found");const n=e.append("g").attr("class","commit-bullets"),t=e.append("g").attr("class","commit-labels");let a=y==="TB"||y==="BT"?z:0;const i=[...r.keys()],c=(l=u==null?void 0:u.parallelCommits)!=null?l:!1,d=m((g,h)=>{var x,L;const p=(x=r.get(g))==null?void 0:x.seq,b=(L=r.get(h))==null?void 0:L.seq;return p!==void 0&&b!==void 0?p-b:0},"sortKeys");let $=i.sort(d);y==="BT"&&(c&&Nr($,r,a),$=$.reverse()),$.forEach(g=>{var b,x,L;const h=r.get(g);if(!h)throw new Error("Commit not found for key ".concat(g));c&&(a=Jr(h,y,a,k));const p=Qr(h,a,c);if(o){const O=Vr(h),C=(b=h.customType)!=null?b:h.type,w=(L=(x=E.get(h.branch))==null?void 0:x.index)!=null?L:0;Kr(n,h,p,O,w,C),Yr(t,h,p,a),Ur(t,h,p,a)}y==="TB"||y==="BT"?k.set(h.id,{x:p.x,y:p.posWithOffset}):k.set(h.id,{x:p.posWithOffset,y:p.y}),a=y==="BT"&&c?a+I:a+I+R,a>P&&(P=a)})},"drawCommits"),Xr=m((e,r,o,n,t)=>{const a=(y==="TB"||y==="BT"?o.x<n.x:o.y<n.y)?r.branch:e.branch,i=m(d=>d.branch===a,"isOnBranchToGetCurve"),c=m(d=>d.seq>e.seq&&d.seq<r.seq,"isBetweenCommits");return[...t.values()].some(d=>c(d)&&i(d))},"shouldRerouteArrow"),H=m((e,r,o=0)=>{const n=e+Math.abs(e-r)/2;if(o>5)return n;if(S.every(a=>Math.abs(a-n)>=10))return S.push(n),n;const t=Math.abs(e-r);return H(e,r-t/5,o+1)},"findLane"),Zr=m((e,r,o,n)=>{var p,b,x,L,O;const t=k.get(r.id),a=k.get(o.id);if(t===void 0||a===void 0)throw new Error("Commit positions not found for commits ".concat(r.id," and ").concat(o.id));const i=Xr(r,o,t,a,n);let c="",d="",$=0,l=0,g=(p=E.get(o.branch))==null?void 0:p.index;o.type===f.MERGE&&r.id!==o.parents[0]&&(g=(b=E.get(r.branch))==null?void 0:b.index);let h;if(i){c="A 10 10, 0, 0, 0,",d="A 10 10, 0, 0, 1,",$=10,l=10;const C=t.y<a.y?H(t.y,a.y):H(a.y,t.y),w=t.x<a.x?H(t.x,a.x):H(a.x,t.x);y==="TB"?t.x<a.x?h="M ".concat(t.x," ").concat(t.y," L ").concat(w-$," ").concat(t.y," ").concat(d," ").concat(w," ").concat(t.y+l," L ").concat(w," ").concat(a.y-$," ").concat(c," ").concat(w+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):(g=(x=E.get(r.branch))==null?void 0:x.index,h="M ".concat(t.x," ").concat(t.y," L ").concat(w+$," ").concat(t.y," ").concat(c," ").concat(w," ").concat(t.y+l," L ").concat(w," ").concat(a.y-$," ").concat(d," ").concat(w-l," ").concat(a.y," L ").concat(a.x," ").concat(a.y)):y==="BT"?t.x<a.x?h="M ".concat(t.x," ").concat(t.y," L ").concat(w-$," ").concat(t.y," ").concat(c," ").concat(w," ").concat(t.y-l," L ").concat(w," ").concat(a.y+$," ").concat(d," ").concat(w+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):(g=(L=E.get(r.branch))==null?void 0:L.index,h="M ".concat(t.x," ").concat(t.y," L ").concat(w+$," ").concat(t.y," ").concat(d," ").concat(w," ").concat(t.y-l," L ").concat(w," ").concat(a.y+$," ").concat(c," ").concat(w-l," ").concat(a.y," L ").concat(a.x," ").concat(a.y)):t.y<a.y?h="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(C-$," ").concat(c," ").concat(t.x+l," ").concat(C," L ").concat(a.x-$," ").concat(C," ").concat(d," ").concat(a.x," ").concat(C+l," L ").concat(a.x," ").concat(a.y):(g=(O=E.get(r.branch))==null?void 0:O.index,h="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(C+$," ").concat(d," ").concat(t.x+l," ").concat(C," L ").concat(a.x-$," ").concat(C," ").concat(c," ").concat(a.x," ").concat(C-l," L ").concat(a.x," ").concat(a.y))}else c="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,l=20,y==="TB"?(t.x<a.x&&(o.type===f.MERGE&&r.id!==o.parents[0]?h="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(a.y-$," ").concat(c," ").concat(t.x+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x-$," ").concat(t.y," ").concat(d," ").concat(a.x," ").concat(t.y+l," L ").concat(a.x," ").concat(a.y)),t.x>a.x&&(c="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,l=20,o.type===f.MERGE&&r.id!==o.parents[0]?h="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(a.y-$," ").concat(d," ").concat(t.x-l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x+$," ").concat(t.y," ").concat(c," ").concat(a.x," ").concat(t.y+l," L ").concat(a.x," ").concat(a.y)),t.x===a.x&&(h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x," ").concat(a.y))):y==="BT"?(t.x<a.x&&(o.type===f.MERGE&&r.id!==o.parents[0]?h="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(a.y+$," ").concat(d," ").concat(t.x+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x-$," ").concat(t.y," ").concat(c," ").concat(a.x," ").concat(t.y-l," L ").concat(a.x," ").concat(a.y)),t.x>a.x&&(c="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,l=20,o.type===f.MERGE&&r.id!==o.parents[0]?h="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(a.y+$," ").concat(c," ").concat(t.x-l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x-$," ").concat(t.y," ").concat(c," ").concat(a.x," ").concat(t.y-l," L ").concat(a.x," ").concat(a.y)),t.x===a.x&&(h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x," ").concat(a.y))):(t.y<a.y&&(o.type===f.MERGE&&r.id!==o.parents[0]?h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x-$," ").concat(t.y," ").concat(d," ").concat(a.x," ").concat(t.y+l," L ").concat(a.x," ").concat(a.y):h="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(a.y-$," ").concat(c," ").concat(t.x+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y)),t.y>a.y&&(o.type===f.MERGE&&r.id!==o.parents[0]?h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x-$," ").concat(t.y," ").concat(c," ").concat(a.x," ").concat(t.y-l," L ").concat(a.x," ").concat(a.y):h="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(a.y+$," ").concat(d," ").concat(t.x+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y)),t.y===a.y&&(h="M ".concat(t.x," ").concat(t.y," L ").concat(a.x," ").concat(a.y)));if(h===void 0)throw new Error("Line definition not found");e.append("path").attr("d",h).attr("class","arrow arrow"+g%A)},"drawArrow"),rt=m((e,r)=>{const o=e.append("g").attr("class","commit-arrows");[...r.keys()].forEach(n=>{const t=r.get(n);t.parents&&t.parents.length>0&&t.parents.forEach(a=>{Zr(o,r.get(a),t,r)})})},"drawArrows"),tt=m((e,r)=>{const o=e.append("g");r.forEach((n,t)=>{var p;const a=t%A,i=(p=E.get(n.name))==null?void 0:p.pos;if(i===void 0)throw new Error("Position not found for branch ".concat(n.name));const c=o.append("line");c.attr("x1",0),c.attr("y1",i),c.attr("x2",P),c.attr("y2",i),c.attr("class","branch branch"+a),y==="TB"?(c.attr("y1",z),c.attr("x1",i),c.attr("y2",P),c.attr("x2",i)):y==="BT"&&(c.attr("y1",P),c.attr("x1",i),c.attr("y2",z),c.attr("x2",i)),S.push(i);const d=n.name,$=V(d),l=o.insert("rect"),g=o.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);g.node().appendChild($);const h=$.getBBox();l.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-h.width-4-((u==null?void 0:u.rotateCommitLabel)===!0?30:0)).attr("y",-h.height/2+8).attr("width",h.width+18).attr("height",h.height+4),g.attr("transform","translate("+(-h.width-14-((u==null?void 0:u.rotateCommitLabel)===!0?30:0))+", "+(i-h.height/2-1)+")"),y==="TB"?(l.attr("x",i-h.width/2-10).attr("y",0),g.attr("transform","translate("+(i-h.width/2-5)+", 0)")):y==="BT"?(l.attr("x",i-h.width/2-10).attr("y",P),g.attr("transform","translate("+(i-h.width/2-5)+", "+P+")")):l.attr("transform","translate(-19, "+(i-h.height/2)+")")})},"drawBranches"),et=m(function(e,r,o,n,t){return E.set(e,{pos:r,index:o}),r+=50+(t?40:0)+(y==="TB"||y==="BT"?n.width/2:0),r},"setBranchPosition"),ot=m(function(e,r,o,n){var $,l;if(Sr(),B.debug("in gitgraph renderer",e+"\n","id:",r,o),!u)throw new Error("GitGraph config not found");const t=($=u.rotateCommitLabel)!=null?$:!1,a=n.db;q=a.getCommits();const i=a.getBranchesAsObjArray();y=a.getDirection();const c=mr('[id="'.concat(r,'"]'));let d=0;i.forEach((g,h)=>{var C;const p=V(g.name),b=c.append("g"),x=b.insert("g").attr("class","branchLabel"),L=x.insert("g").attr("class","label branch-label");(C=L.node())==null||C.appendChild(p);const O=p.getBBox();d=et(g.name,d,h,O,t),L.remove(),x.remove(),b.remove()}),F(c,q,!1),u.showBranches&&tt(c,i),rt(c,q),F(c,q,!0),$r.insertTitle(c,"gitTitleText",(l=u.titleTopMargin)!=null?l:0,a.getDiagramTitle()),lr(void 0,c,u.diagramPadding,u.useMaxWidth)},"draw"),at={draw:ot},nt=m(e=>"\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ".concat([0,1,2,3,4,5,6,7].map(r=>"\n        .branch-label".concat(r," { fill: ").concat(e["gitBranchLabel"+r],"; }\n        .commit").concat(r," { stroke: ").concat(e["git"+r],"; fill: ").concat(e["git"+r],"; }\n        .commit-highlight").concat(r," { stroke: ").concat(e["gitInv"+r],"; fill: ").concat(e["gitInv"+r],"; }\n        .label").concat(r,"  { fill: ").concat(e["git"+r],"; }\n        .arrow").concat(r," { stroke: ").concat(e["git"+r],"; }\n        ")).join("\n"),"\n\n  .branch {\n    stroke-width: 1;\n    stroke: ").concat(e.lineColor,";\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ").concat(e.commitLabelFontSize,"; fill: ").concat(e.commitLabelColor,";}\n  .commit-label-bkg { font-size: ").concat(e.commitLabelFontSize,"; fill: ").concat(e.commitLabelBackground,"; opacity: 0.5; }\n  .tag-label { font-size: ").concat(e.tagLabelFontSize,"; fill: ").concat(e.tagLabelColor,";}\n  .tag-label-bkg { fill: ").concat(e.tagLabelBackground,"; stroke: ").concat(e.tagLabelBorder,"; }\n  .tag-hole { fill: ").concat(e.textColor,"; }\n\n  .commit-merge {\n    stroke: ").concat(e.primaryColor,";\n    fill: ").concat(e.primaryColor,";\n  }\n  .commit-reverse {\n    stroke: ").concat(e.primaryColor,";\n    fill: ").concat(e.primaryColor,";\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ").concat(e.primaryColor,";\n    fill: ").concat(e.primaryColor,";\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ").concat(e.textColor,";\n  }\n"),"getStyles"),ct=nt,ut={parser:zr,db:U,renderer:at,styles:ct};export{ut as diagram};
